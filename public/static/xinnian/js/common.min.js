(function(){
    window.K = K = {};

    K.isWeiXin = function() { //是否微信浏览器
        var ua = window.navigator.userAgent.toLowerCase();
        if(ua.match(/MicroMessenger/i) == 'micromessenger'){
            return true;
        }else{
            return false;
        }
    }

    K.is_mobileQQ = function() { // 是否手机qq浏览器
        var ua = navigator.userAgent.toLowerCase();
        if (ua.match('nettype/wifi')) {
            return true;
        } else {
            return false;
        }
    }

    //K.getVersion = function() {
    //    var u = navigator.userAgent, app = navigator.appVersion;
    //    var versions = { //移动终端浏览器版本信息
    //        //trident: u.indexOf('Trident') > -1, //IE内核
    //        //presto: u.indexOf('Presto') > -1, //opera内核
    //       // gecko: u.indexOf('Gecko') > -1 && u.indexOf('KHTML') == -1, //火狐内核
    //       // mobile: !!u.match(/AppleWebKit.*Mobile.*/)||!!u.match(/AppleWebKit/), //是否为移动终端
    //        ios: !!u.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/), //ios终端
    //        android: u.indexOf('Android') > -1 || u.indexOf('Linux') > -1, //android终端或者uc浏览器
    //        //iPhone: u.indexOf('iPhone') > -1 || u.indexOf('Mac') > -1, //是否为iPhone或者QQHD浏览器
    //        iPad: u.indexOf('iPad') > -1, //是否iPad
    //       // webApp: u.indexOf('Safari') == -1, //是否web应该程序，没有头部与底部
    //        //webKit: u.indexOf('AppleWebKit') > -1 //苹果、谷歌内核
    //    };
    //
    //    for (var key in versions) {
    //        if (versions[key])
    //            return key;
    //    }
    //
    //    return false;
    //}

    K.makeMask = (function() {
        return function(type) {
            var content = '';
            if (type == 'weixin') {
                content =   '<div class="mask-guide clearfix">' +
                                '<img class="mask-guide-img" src="/static/wap/images/arrowhead.png" alt="">' +
                            '</div>' +
                            '<span class="mask-tip">点击右上角按钮，选择"在浏览器中打开"</span>'; 
            } else {
                content = '<span class="mask-tip">在其他浏览器打开操作</span>';
            }
            if ($('.mask').length) {
                $('.mask').addClass('slidedown').removeClass('slideup').removeClass('mask-remove').show();
            } else {
                var dom = '<div class="mask slidedown">' +
                    '<div class="wrap-page">' +
                        '<div class="mask-page">' +     
                        '</div>' + content + 
                    '</div>' +
                '</div>';
                $('body').append(dom);
                $('.mask').click(function(e) {
                    $('.mask').addClass('slideup').addClass('mask-remove').removeClass('slidedown');
                })
            }
        }
    })();


    K.NativeApp = {
        home: function() {
            return '';
        },
        joinTeam: function(teamId) { // 进入加入社团页面
            return '?team=' + teamId;
        }
    }

    K.testApp = function(type, fn) { // 是否安装了app 
        var way = '';
        way = K.isWeiXin() ? 'weixin' : K.is_mobileQQ() ? 'qq' : '';
        if (way) {
            K.makeMask(way);
            fn();
            return false;
        }

        var timeout, t = 1000, hasApp = true;
        var type = type || 'home';

        setTimeout(function () {
            if (!hasApp) {
                K.forceDownload();
            }
            document.body.removeChild(ifr);
            fn && fn();
        }, 2000);
      
        var t1 = Date.now();
        var schema = '';
        var ifr = document.createElement("iframe"); 
        if (schema = K.NativeApp[type]) {
            schema = SCHEMA + schema;
        } else {
            schema = SCHEMA;
        }
        ifr.setAttribute('src', schema);  
        ifr.setAttribute('style', 'display:none');  
        document.body.appendChild(ifr);

        timeout = setTimeout(function () {  
             var t2 = Date.now();  
             if (!t1 || t2 - t1 < t + 100) {  
                 hasApp = false;  
             }  
        }, t);  
    }

    K.loadingButton = function(el) {
        var text = el.attr('data-text'),
            loadGif = $('<img class="load-button-img" src="/static/wap/images/loading-2.gif" />');

        return {
            load: function() {
                el.html(loadGif);
                return this;
            },
            unload: function() {
                el.html(text);
            }
        }
    }

    K.isMobile = function(mobile) {
        var myreg = /^(((17[0-9]{1})|(13[0-9]{1})|(15[0-9]{1})|(18[0-9]{1}))+\d{8})$/; 
        if(!myreg.test(mobile)) { 
            return false; 
        }
        return true;
    }

    K.checkScrollToBottom = (function() {
        var scrollInterval = null;
        return function(options) {
            if (!options) return;
            if (scrollInterval) {
                clearInterval(scrollInterval);
            }
            
            var el = options.el || $(document);
            var count = 0, lock = false, hasTip = false;
            var _callback = function() {
                count++;
                if (options.nums && count > options.nums) {
                    clearInterval(scrollInterval);
                    return;
                }            
                options.callback && options.callback(function(res){
                    if (res.result == 0) {
                        lock = true;
                    } else if (res.result == 1 || res.result == 2) {
                        lock = false;
                    }
                });
            };



            scrollInterval = setInterval( function(){
                if ( !el.find('.homePanel').length ) {
                    return false;
                }
                var documentEl = el,
                    scrollTop = documentEl.scrollTop();
                    if (scrollTop + 80 + documentEl.innerHeight() > documentEl.children().height()) {
                        if (lock  == true && !hasTip) {
                            hasTip = true;
                            options.tip && options.tip();
                            return;
                        }
                        _callback();
                    } else {
                        hasTip = false;
                    }
            } , 500);
        }
    })();

    // attrndant modal
    K.aModal = function(option){
        var o = {},
            defaults = {
                title: '提示',
                titleCenter: true,
                content: '',
                width: '60%',
                height: '180',
                ok: true,
                okText: '确定',
                okCallback: function(){},
                closeBtn: false
            };

        var modal = function(){};
        modal.prototype = {
            constructor: modal,
            init: function(options){

                var op = $.extend(o, defaults, options),
                  self = this;
                //创建dom 并绑定事件
                this.createDom(op);
                return this;
            },
            createDom: function(op){
                var self = this,
                    arr  = [];
                arr.push('<div class="modal-mask"></div>');
                arr.push('<div class="modal-w">');
                arr.push('<h3 class="modal-title">'+op.title+'<span class="modal-close hide">x</span></h3>');
                arr.push('<div class="modal-content">'+op.content+'</div>');
                arr.push('<div class="modal-operate"><button class="sure-btn">'+op.okText+'</button></div>');
                arr.push('</div>');
                arr.join('');
                $('body').prepend(arr.join(''));//插入最前面
                
                //缓存变量
                var $modal    = $('.modal-w'),
                    $title    = $('.modal-title'),
                    $content  = $('.modal-content'),
                    $sureBtn  = $('.sure-btn'),
                    $closeBtn = $('.modal-close'),
                    $modalOp  = $('.modal-operate');
                //绑定事件
                if ( op.closeBtn ) {
                    $closeBtn
                        .show()
                        .on('click',function(e) {
                            self.destroy();
                        });
                }else {
                    $closeBtn.hide();
                }

                $modal.on('click', '.sure-btn', function(e) {
                    if ( op.okCallback ) { op.okCallback(); }
                    //销毁弹窗
                    self.destroy();
                });

                //调整样式
                $modal
                    .width(op.width)
                    .height(op.height)
                    .css({marginTop:"-"+op.height/2+'px'});
                        //要算上padding的值
                $content.height(op.height-$title.height()-$modalOp.height()-20-36);

                if( !op.titleCenter ) { $title.removeClass('tc').addClass('tl'); }
            },
            destroy: function(){
                $('.modal-mask').remove();
                $('.modal-w').remove();
            }
        };
        return (new modal()).init(option);
    }
    // alert
    window.oAlert = window.alert;
    window.alert = (function() {
        var timer = '';
        var alertEl = $('<div class="ui-alert"><div class="ui-alert-content"></div></div>');
        return function(text) {
            if (timer) return;
            var uiSelect = $('.ui-alert');
            if (!uiSelect.length) {
                alertEl.find('.ui-alert-content').text(text);
                $('body').append(alertEl);
            } else {
                uiSelect.show();
            }

            timer = setTimeout(function() {
                alertEl.remove();
                clearTimeout(timer);
                timer = null;
            }, 1500);
        }
    })();

    // Returns a function, that, as long as it continues to be invoked, will not
    // be triggered. The function will be called after it stops being called for
    // N milliseconds.
    var debounce = function(func, wait) {
      var timeout;
      return function() {
        var context = this, args = arguments;
        var later = function() {
          timeout = null;
          func.apply(context, args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
      };
    };
    
    K.throttle = function(func, wait) {
      var context, args, timeout, throttling, more;
      var whenDone = debounce(function(){ more = throttling = false; }, wait);
      return function() {
        context = this; args = arguments;
        var later = function() {
          timeout = null;
          if (more) func.apply(context, args);
          whenDone();
        };
        if (!timeout) timeout = setTimeout(later, wait);
        if (throttling) {
          more = true;
        } else {
          func.apply(context, args);
        }
        whenDone();
        throttling = true;
      };
    };

})();
(function(){

var server = K.server = {};

var send = function (type, api, parameters, success, async) {
    typeof success == 'function' || (success = function () {
    });
    var request = $.ajax({
        url: api + "?r=" + Math.random(),
        data: parameters,
        type: type,
        dataType: 'json',
        async: true,
        cache: false,
        headers: {"Cache-Control": "no-cache", "Accept": "application/json"},
        timeout: 300000,
        success: function (data, textStatus, jqXHR) {
            success.call(this, data, textStatus, jqXHR);
        },
        error: function (jqXHR, textStatus, errorThrown) {
            if (jqXHR.status == 401) {
                location.href = contextPath;
            } else {
                if (!errorThrown) {
                    return false;
                }
                var errors = {
                    101: "网络不稳定或不畅通，请检查网络设置",
                    403: "服务器禁止此操作！",
                    500: "服务器遭遇异常阻止了当前请求的执行<br/><br/><br/>"
                };

                var msg = null;
                switch (textStatus) {
                    case "timeout":
                        msg = "网络连接超时，请检查网络是否畅通！";
                        break;
                    case "error":
                        if (errors[jqXHR.status]) {
                            var data = null;
                            try {
                                data = jQuery.parseJSON(jqXHR.responseText);
                            } catch (e) {
                            }
                            if (data && data.message) {
                                msg = data.message;
                            } else {
                                msg = errors[jqXHR.status];
                            }
                        } else {
                            msg = "服务器响应异常<br/><br/>" + (jqXHR.status == 0 ? "" : jqXHR.status) + "&nbsp;" + errorThrown;
                        }
                        break;
                    case "abort":
                        msg = null;//"数据连接已被取消！";
                        break;
                    case "parsererror":
                        msg = "数据解析错误！";
                        break;
                    default:
                        msg = "出现错误:" + textStatus + "！";
                }
                if (errorThrown.code != null && errorThrown.message != null && !errors[errorThrown.code]) {
                    msg += "</br>[code:" + errorThrown.code + "][message:" + errorThrown.message + "]" + (null == errorThrown.stack ? "" : errorThrown.stack);
                }
                if (msg == null) {
                    msg = '';
                }
                success.call(this, {code: jqXHR.status, msg: msg}, textStatus, jqXHR, errorThrown);
            }
        }
    });
    return request;
}


// 列表
server.attendantList = function (data, callback) {
    return send('get', '/wap/xinnian/approved/list', data, callback);
};
//排序列表
server.attendantSortList = function (data, callback) {
    return send('get', '/wap/xinnian/approved/sort/list', data, callback);
};
// 申请注册
server.enroll = function (data, callback) {
    return send('post', '/wap/xinnian/enroll', data, callback);
};

// 个人详情
server.attendantDetail = function (data, callback) {
    return send('get', '/wap/xinnian/detail', data, callback);
};

// 投票
server.attendantVote = function (data, callback) {
    return send('post', '/wap/xinnian/vote', data, callback);
};

server.searchAttendant = function (data, callback) {
    return send('post', '/wap/xinnian/search', data, callback);
};
//=========== 后台

// 待审核列表
server.pendingList = function (data, callback) {
    return send('get', '/xinnian/pending/list', data, callback);
};

// 已通过列表
server.approvedList = function (data, callback) {
    return send('get', '/xinnian/approved/list', data, callback);
};

// 通过
server.approve = function (data, callback) {
    return send('post', '/xinnian/approve', data, callback);
};

// 拒绝
server.remove = function (data, callback) {
    return send('post', '/xinnian/remove', data, callback);
};

})();
(function($) {
    $.fn.ajaxfileupload = function(options) {
        var settings = {
          params: {},
          action: '',
          onStart: function() { },
          onComplete: function(response) { },
          onCancel: function() { },
          validate_extensions : true,
          valid_extensions : ['gif','png','jpg','jpeg'],
          submit_button : null
        };

        var uploading_file = false;

        if ( options ) { 
          $.extend( settings, options );
        }


        // 'this' is a jQuery collection of one or more (hopefully) 
        //  file elements, but doesn't check for this yet
        return this.each(function() {
          var $element = $(this);

          // Skip elements that are already setup. May replace this 
          //  with uninit() later, to allow updating that settings
          if($element.data('ajaxUploader-setup') === true) return;

          $element.change(function()
          {
            // since a new image was selected, reset the marker
            uploading_file = false;

            // only update the file from here if we haven't assigned a submit button
            if (settings.submit_button == null)
            {
              upload_file();
            }
          });

          if (settings.submit_button == null)
          {
            // do nothing
          } else
          {
            settings.submit_button.click(function(e)
            {
              // Prevent non-AJAXy submit
              e.preventDefault();
              
              // only attempt to upload file if we're not uploading
              if (!uploading_file)
              {
                upload_file();
              }
            });
          }

          var upload_file = function()
          {
            if($element.val() == '') return settings.onCancel.apply($element, [settings.params]);

            // make sure extension is valid
            var ext = $element.val().split('.').pop().toLowerCase();
            if(true === settings.validate_extensions && $.inArray(ext, settings.valid_extensions) == -1)
            {
              // Pass back to the user
              settings.onComplete.apply($element, [{status: false, message: 'The select file type is invalid. File must be ' + settings.valid_extensions.join(', ') + '.'}, settings.params]);
            } else
            { 
              uploading_file = true;

              // Creates the form, extra inputs and iframe used to 
              //  submit / upload the file
              wrapElement($element);

              // Call user-supplied (or default) onStart(), setting
              //  it's this context to the file DOM element
              var ret = settings.onStart.apply($element, [settings.params]);

              // let onStart have the option to cancel the upload
              if(ret !== false)
              {
                $element.parent('form').submit(function(e) { e.stopPropagation(); }).submit();
              }
            }
          };

          // Mark this element as setup
          $element.data('ajaxUploader-setup', true);

          /*
          // Internal handler that tries to parse the response 
          //  and clean up after ourselves. 
          */
          var handleResponse = function(loadedFrame, element) {
            var response, responseStr = $(loadedFrame).contents().text();
            try {
              //response = $.parseJSON($.trim(responseStr));
              response = JSON.parse(responseStr);
            } catch(e) {
              response = responseStr;
            }

            // Tear-down the wrapper form
            element.siblings().remove();
            element.unwrap();

            uploading_file = false;

            // Pass back to the user
            settings.onComplete.apply(element, [response, settings.params]);
          };

          /*
          // Wraps element in a <form> tag, and inserts hidden inputs for each
          //  key:value pair in settings.params so they can be sent along with
          //  the upload. Then, creates an iframe that the whole thing is 
          //  uploaded through. 
          */
          var wrapElement = function(element) {
            // Create an iframe to submit through, using a semi-unique ID
            var frame_id = 'ajaxUploader-iframe-' + Math.round(new Date().getTime() / 1000)
            $('body').after('<iframe width="0" height="0" style="display:none;" name="'+frame_id+'" id="'+frame_id+'"/>');
            $('#'+frame_id).get(0).onload = function() {
              handleResponse(this, element);
            };

            // Wrap it in a form
            element.wrap(function() {
              return '<form action="' + settings.action + '" method="POST" enctype="multipart/form-data" target="'+frame_id+'" />'
            })
            // Insert <input type='hidden'>'s for each param
            .before(function() {
              var key, html = '';
              for(key in settings.params) {
                var paramVal = settings.params[key];
                if (typeof paramVal === 'function') {
                  paramVal = paramVal();
                }
                html += '<input type="hidden" name="' + key + '" value="' + paramVal + '" />';
              }
              return html;
            });
          }



        });
      }
})( jQuery )